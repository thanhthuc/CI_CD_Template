name: CI-Test

on: [push] # TAKE NOTE: on pull request or on push

#on:
#  push:
#    branches:
#    - master
#  pull_request:
#    branches:
#    - master

jobs:
  test:
    name: Test
    runs-on: [self-hosted, macOS, x64]
    strategy:
        matrix:
          destination: ['platform=iOS Simulator,OS=16.2,name=iPhone 14 Pro']
    steps:
      - name: Checkout
        uses: actions/checkout@master
#      - name: Set environment variables from project settings
#        run: |
#          exec .github/scripts/set-env-from-xcodeproj.sh
      
      # Delete keychain after use
      - name: Delete keychain
        if: always() # Always run this step to ensure the keychain is properly disposed of
        run: |
          security delete-keychain build.keychain
          
      # Import Certificate and provisioning
      - name: Import signing certificate
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          exec .github/scripts/import-certificate.sh
      - name: Import provisioning profile
        env:
          PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE_DATA }}
        run: |
          exec .github/scripts/import-profile.sh
      # === End import ===
      
      - name: Build
        run: |
          xcodebuild clean build -project ExampleApp/ExampleApp.xcodeproj -scheme ExampleApp -destination "${destination}" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO
        env:
         destination: ${{ matrix.destination }}
         
      # Upload build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build.log
          path: ~/Library/Logs/gym/*.log
      # ===End upload===
      
      - name: Test
        run: |
          xcodebuild clean test -project ExampleApp/ExampleApp.xcodeproj -scheme ExampleAppTests -destination "${destination}" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO
        env:
         destination: ${{ matrix.destination }}
      - name: Notify On Slack
        uses: 8398a7/action-slack@v3.15.1
        env:
          # required
          SLACK_WEBHOOK_URL: ${{ secrets.CICD_SLACK }}
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
          custom_payload: |
              {
                attachments: [{
                  color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                  text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
                }]
              }

          # custom message to send to slack
#          args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}'
        # pick up events even if the job is success.
        if: always()

#=====================================================
         
#  #notify workflow for slack notification
#  notify:
#    name: Notify on Slack
#    runs-on: macos-latest
#    # Only run this workflow when "build" workflow succeeds
#    needs: [build]
#
#    # Only run this workflow if it target is main branch on pull request event
#    # if: ${{ github.base_ref == 'main' && github.event_name == 'pull_request' }}
#
#    steps:
#      - uses: 8398a7/action-slack@v3.15.1
#        env:
#          # required
#          SLACK_WEBHOOK_URL: ${{ secrets.CICD_SLACK }}
#        with:
#          status: ${{ job.status }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
#          custom_payload: |
#              {
#                attachments: [{
#                  color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
#                  text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
#                }]
#              }
#
#          # custom message to send to slack
##          args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}'
#        # pick up events even if the job is success.
#        if: always()

# for more information with action slack:
# https://github.com/marketplace/actions/action-slack
# https://sagarsonwane230797.medium.com/automate-slack-notification-with-github-actions-4675862713cc
